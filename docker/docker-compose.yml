---
services:
  db:
    container_name: shortify-db
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - shortify
    volumes:
      - db:/var/lib/postgresql/data

  api:
    container_name: shortify-api
    image: timisd/shortify-api:0.2.0
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings__Host=${DB_HOST}
      - DatabaseSettings__Port=${DB_PORT}
      - DatabaseSettings__Database=${DB_NAME}
      - DatabaseSettings__Username=${DB_USER}
      - DatabaseSettings__Password=${DB_PASSWORD}
      - ApiSettings__EncryptionKey=${ENCRYPTION_KEY}
      - ApiSettings__EncryptionSalt=${ENCRYPTION_SALT}
      - ApiSettings__FrontendUrl=${FRONTEND_URL}
    networks:
      - shortify
    depends_on:
      - db
    command: >
      sh -c "dotnet ef database update --project Shortify.API && dotnet Shortify.API.dll"

  webui:
    container_name: shortify-webui
    image: timisd/shortify-webui:0.2.0
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - WebSettings__ApiUrl=${API_URL}
    labels:
      - traefik.enable=true
      - traefik.http.routers.shortify-http.entrypoints=web
      - traefik.http.routers.shortify-http.rule=Host(`shortify.tmql.de`)
      - traefik.http.routers.shortify-https.tls=true
      - traefik.http.routers.shortify-https.tls.certresolver=netcup
      - traefik.http.routers.shortify-https.entrypoints=websecure
      - traefik.http.routers.shortify-https.rule=Host(`shortify.tmql.de`)
    networks:
      - frontend
      - shortify
    volumes:
      - webui_keys:/root/.aspnet/DataProtection-Keys
    depends_on:
      - api

networks:
  frontend:
    external: true
  shortify:

volumes:
  db:
  webui_keys: